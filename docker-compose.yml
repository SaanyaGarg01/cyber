version: '3.8'

services:
  # PostgreSQL Database for structured data
  postgres:
    image: postgres:15
    container_name: cyber_postgres
    environment:
      POSTGRES_DB: cyber_threat_db
      POSTGRES_USER: cyber_user
      POSTGRES_PASSWORD: cyber_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/app/database/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - cyber_network
    restart: unless-stopped

  # Neo4j Graph Database for social network analysis
  neo4j:
    image: neo4j:5.12
    container_name: cyber_neo4j
    environment:
      NEO4J_AUTH: neo4j/cyber_graph_password_2024
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - cyber_network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cyber_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cyber_network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyber_backend
    environment:
      - DATABASE_URL=postgresql://cyber_user:cyber_secure_password_2024@postgres:5432/cyber_threat_db
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=cyber_graph_password_2024
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - SECRET_KEY=cyber_threat_detection_secret_key_2024_secure
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - neo4j
      - redis
    networks:
      - cyber_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Streamlit Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cyber_frontend
    environment:
      - BACKEND_URL=http://backend:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app
      - ./data:/app/data
    depends_on:
      - backend
    networks:
      - cyber_network
    restart: unless-stopped

  # Jupyter Notebook for research and model development
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: cyber_jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=cyber_research_token_2024
    ports:
      - "8888:8888"
    volumes:
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
      - ./backend/app/nlp:/home/jovyan/nlp
      - ./notebooks:/home/jovyan/work
    networks:
      - cyber_network
    restart: unless-stopped

  # Elasticsearch for advanced text search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: cyber_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cyber_network
    restart: unless-stopped

  # Kibana for data visualization and monitoring
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: cyber_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - cyber_network
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  elasticsearch_data:

networks:
  cyber_network:
    driver: bridge